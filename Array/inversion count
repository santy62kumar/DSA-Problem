int merge(vector<int> &arr, int low, int mid, int high)
{
        
    vector<int> temp;
    int left=low;
    int right=mid+1;
    int cnt=0;
    
    while(left<=mid && right<= high){
        if(arr[left]<= arr[right]) 
        {
            temp.push_back(arr[left]);
            left++;
        }
        else{
            temp.push_back(arr[right]);
            cnt+=(mid-left+1);
            right++;
        }
    }
    
    while(left<= mid){
            temp.push_back(arr[left]);
            left++;
    }
    
    while(right<= high){
        temp.push_back(arr[right]);
        right++;
    }
    
    for(int i=low; i<=high; i++){
        arr[i]=temp[i-low];
        
    }
    return cnt;
        
        
}


int mergesort(vector<int> &arr, int low, int high){
    
    int cnt=0;
    if(low >= high) return cnt;
    int mid= (low+high)/2;
    
    cnt+= mergesort(arr, low, mid);
    cnt+= mergesort(arr, mid+1, high);
    cnt+= merge(arr, low, mid, high);
    return cnt;
}
int inversionCount(vector<int> &arr) {
    int n=arr.size();
    
    return mergesort(arr, 0,n-1);
}

//note: application of merge sort, and original array has been distored
//t.c: O(N*logN) , which is tc of merge sort, N = size of the given array
//s.c: O(N), as in the merge sort We use a temporary array to store elements in sorted order. 
//Inversion Count: For an array, inversion count indicates
// how far (or close) the array is from being sorted. If the 
//array is already sorted then the inversion count is 0.
//If an array is sorted in the reverse order 
//then the inversion count is the maximum. 