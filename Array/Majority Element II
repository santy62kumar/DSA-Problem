//brute force 
// in an array at max two integers can occur more than floor(N/3) times 

vector<int> majorityElement(vector<int> v){

    vector<int> ls;
    int n=v.size();

    for(int i=0;i<n;i++){

        int cnt=0;

        if(ls.size()==0 || ls[0]!=v[i]){
            for(int j=0;j<n;j++){

                if(v[i]==v[j]){
                    cnt++;
                }

            }
            if(cnt> (n/3)){
                ls.push_back(v[i]);
            }
        }
        if(ls.size()==2) break;
        
    }
    return ls;
}

// better approach
vector<int> majorityElement(vector<int> v){

    map<int,int> mp;
    int n=v.size();
    vector<int> ls;

    int mini=(n/3)+1;

    for(int i=0;i<n;i++){

        mp[v[i]]++;
        if(mp[v[i]]==mini){
            ls.push_back(v[i]);
        }
        if(ls.size()==2) break;
    }
    return ls;
}

// optimal solution
vector<int> majorityElement(vector<int> v){

    int cnt1=0,cnt2=0;
    int n=v.size();
    int el1 = INT_MIN; 
    int el2 = INT_MIN; 

    for(int i=0;i<n;i++){

        if(cnt1==0 && el2!=v[i]){
            cnt1=1;
            el1=v[i];
        }
        else if (cnt2 == 0 && el1 != v[i]) {
            cnt2 = 1;
            el2 = v[i];
        }
        else if (v[i] == el1) cnt1++;
        else if (v[i] == el2) cnt2++;
        else {
            cnt1--, cnt2--;
        }
    
    }

    vector<int> ls; // list of answers

    // Manually check if the stored elements in
    // el1 and el2 are the majority elements:
    cnt1 = 0, cnt2 = 0;
    for (int i = 0; i < n; i++) {
        if (v[i] == el1) cnt1++;
        if (v[i] == el2) cnt2++;
    }

    int mini = int(n / 3) + 1;
    if (cnt1 >= mini) ls.push_back(el1);
    if (cnt2 >= mini) ls.push_back(el2);

    // Uncomment the following line
    // if it is told to sort the answer array:
    // sort(ls.begin(), ls.end()); //TC --> O(2*log2) ~ O(1);

    return ls;
}


// NOTE solution is extension of majority element of (n/2)