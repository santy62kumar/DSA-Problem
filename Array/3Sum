vector<vector<int>> threeSum(vector<int>& nums){

    int n=nums.size();
    sort(nums.begin(),nums.end());
    vector<vector<int>> res;
    
    for(int i=0;i<n-2;i++){

        if(i!=0 && nums[i]==nums[i-1]) continue;

        int j=i+1;
        int k=n-1;
        while(j<k){

            int sum= nums[i] +nums[j] +nums[k];
            if(sum<0){
                j++;
            }else if(sum>0){
                k--;
            }else{
                vector<int> temp={nums[i],nums[j],nums[k]};
                res.push_back(temp);

                j++;
                k--;
                while(j<k && nums[j]==nums[j-1]) j++;
                while(j<k && nums[k]==nums[k+1]) k--;
            }


        }
    }
    return res;
}

// TC: O(N*2), nlogn for soting +n*2 for looping , SC: O(k) k= no. of triplet
//hint: moving three pointer can be very difficult so do somthing so that two make it two pointer approach